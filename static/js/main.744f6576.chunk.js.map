{"version":3,"sources":["utilities.js","App.js","index.js"],"names":["drawRect","detections","ctx","forEach","prediction","x","y","width","height","text","color","Math","floor","random","toString","strokeStyle","font","beginPath","fillStyle","fillText","rect","stroke","videoConstraints","facingMode","App","webcamRef","useRef","canvasRef","React","useState","setFacingMode","handleClick","useCallback","prevState","runCoco","a","cocossd","net","console","log","setInterval","detect","current","video","readyState","videoWidth","videoHeight","obj","getContext","useEffect","className","Button","variant","onClick","ref","muted","style","position","marginLeft","marginRight","left","right","textAlign","zindex","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+ZAAaA,G,OAAW,SAACC,EAAYC,GAEjCD,EAAWE,SAAQ,SAAAC,GAAc,kBAGDA,EAAU,KAHT,GAGxBC,EAHwB,KAGrBC,EAHqB,KAGlBC,EAHkB,KAGXC,EAHW,KAIzBC,EAAOL,EAAU,MAGjBM,EAAQC,KAAKC,MAAoB,SAAdD,KAAKE,UAAmBC,SAAS,IAC1DZ,EAAIa,YAAc,IAAML,EACxBR,EAAIc,KAAO,aAGXd,EAAIe,YACJf,EAAIgB,UAAY,IAAMR,EACtBR,EAAIiB,SAASV,EAAMJ,EAAGC,GACtBJ,EAAIkB,KAAKf,EAAGC,EAAGC,EAAOC,GACtBN,EAAImB,c,kBCkGJC,EAAmB,CAGvBC,WANuB,QA0HVC,MAhHf,WACE,IAAMC,EAAYC,iBAAO,MACnBC,EAAYD,iBAAO,MAFZ,EAIuBE,IAAMC,SAdnB,QAUV,mBAINN,EAJM,KAIMO,EAJN,KAMPC,EAAcH,IAAMI,aAAY,WACpCF,GACE,SAAAG,GAAS,MAlBU,SAmBjBA,EAlBwB,cADP,YAuBpB,IAGGC,EAAO,uCAAG,4BAAAC,EAAA,sEACIC,MADJ,OACRC,EADQ,OAEdC,QAAQC,IAAI,0BAEZC,aAAY,WACVC,EAAOJ,KACN,IANW,2CAAH,qDASPI,EAAM,uCAAG,WAAOJ,GAAP,uBAAAF,EAAA,yDAGkB,qBAAtBV,EAAUiB,SACK,OAAtBjB,EAAUiB,SAC6B,IAAvCjB,EAAUiB,QAAQC,MAAMC,WALb,wBAQLD,EAAQlB,EAAUiB,QAAQC,MAC1BE,EAAapB,EAAUiB,QAAQC,MAAME,WACrCC,EAAcrB,EAAUiB,QAAQC,MAAMG,YAG5CrB,EAAUiB,QAAQC,MAAMpC,MAAQsC,EAChCpB,EAAUiB,QAAQC,MAAMnC,OAASsC,EAGjCnB,EAAUe,QAAQnC,MAAQsC,EAC1BlB,EAAUe,QAAQlC,OAASsC,EAlBhB,UAqBOT,EAAII,OAAOE,GArBlB,QAqBLI,EArBK,OAwBL7C,EAAMyB,EAAUe,QAAQM,WAAW,MACzChD,EAAS+C,EAAK7C,GAzBH,4CAAH,sDAqCZ,OARA+C,qBAAU,WAAQf,MAAa,IAS7B,yBAAKgB,UAAU,OAEb,kBAACC,EAAA,EAAD,CAAQC,QAAQ,QAAQC,QAAStB,GAAjC,iBACA,4BAAQmB,UAAU,cAGd,kBAAC,IAAD,CACEI,IAAK7B,EACL8B,OAAO,EACPC,MAAO,CACLC,SAAU,WACVC,WAAY,OACZC,YAAa,OACbC,KAAM,EACNC,MAAO,EACPC,UAAW,SACXC,OAAQ,EAGPxD,MAAO,IACPC,OAAQ,KAEXc,iBAAgB,2BACXA,GADW,IAEdC,iBAIN,4BACE+B,IAAK3B,EACL6B,MAAO,CACLC,SAAU,WACVC,WAAY,OACZC,YAAa,OACbC,KAAM,EACNC,MAAO,EACPC,UAAW,SACXC,OAAQ,EAEPxD,MAAO,IACPC,OAAQ,UC7NrBwD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.744f6576.chunk.js","sourcesContent":["export const drawRect = (detections, ctx) =>{\r\n    // Loop through each prediction\r\n    detections.forEach(prediction => {\r\n  \r\n      // Extract boxes and classes\r\n      const [x, y, width, height] = prediction['bbox']; \r\n      const text = prediction['class']; \r\n  \r\n      // Set styling\r\n      const color = Math.floor(Math.random()*16777215).toString(16);\r\n      ctx.strokeStyle = '#' + color\r\n      ctx.font = '18px Arial';\r\n  \r\n      // Draw rectangles and text\r\n      ctx.beginPath();   \r\n      ctx.fillStyle = '#' + color\r\n      ctx.fillText(text, x, y);\r\n      ctx.rect(x, y, width, height); \r\n      ctx.stroke();\r\n    });\r\n  }","// Import dependencies~\r\n/*\r\nimport React, { useRef, useState, useEffect } from \"react\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\n// 1. TODO - Import required model here\r\n// e.g. import * as tfmodel from \"@tensorflow-models/tfmodel\";\r\nimport Webcam from \"react-webcam\";\r\nimport \"./App.css\";\r\n// 2. TODO - Import drawing utility here\r\n// e.g. import { drawRect } from \"./utilities\";\r\n\r\nfunction App() {\r\n  const webcamRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n\r\n  // Main function\r\n  const runCoco = async () => {\r\n    // 3. TODO - Load network \r\n    // e.g. const net = await cocossd.load();\r\n    \r\n    //  Loop and detect hands\r\n    setInterval(() => {\r\n      detect(net);\r\n    }, 10);\r\n  };\r\n\r\n  const detect = async (net) => {\r\n    // Check data is available\r\n    if (\r\n      typeof webcamRef.current !== \"undefined\" &&\r\n      webcamRef.current !== null &&\r\n      webcamRef.current.video.readyState === 4\r\n    ) {\r\n      // Get Video Properties\r\n      const video = webcamRef.current.video;\r\n      const videoWidth = webcamRef.current.video.videoWidth;\r\n      const videoHeight = webcamRef.current.video.videoHeight;\r\n\r\n      // Set video width\r\n      webcamRef.current.video.width = videoWidth;\r\n      webcamRef.current.video.height = videoHeight;\r\n\r\n      // Set canvas height and width\r\n      canvasRef.current.width = videoWidth;\r\n      canvasRef.current.height = videoHeight;\r\n\r\n      // 4. TODO - Make Detections\r\n      // e.g. const obj = await net.detect(video);\r\n\r\n      // Draw mesh\r\n      const ctx = canvasRef.current.getContext(\"2d\");\r\n\r\n      // 5. TODO - Update drawing utility\r\n      // drawSomething(obj, ctx)  \r\n    }\r\n  };\r\n\r\n  useEffect(()=>{runCoco()},[]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Webcam\r\n          ref={webcamRef}\r\n          muted={true} \r\n          style={{\r\n            position: \"absolute\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            left: 0,\r\n            right: 0,\r\n            textAlign: \"center\",\r\n            zindex: 9,\r\n            width: 640,\r\n            height: 480,\r\n          }}\r\n        />\r\n\r\n        <canvas\r\n          ref={canvasRef}\r\n          style={{\r\n            position: \"absolute\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            left: 0,\r\n            right: 0,\r\n            textAlign: \"center\",\r\n            zindex: 8,\r\n            width: 640,\r\n            height: 480,\r\n          }}\r\n        />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n*/\r\n\r\n// Import dependencies\r\nimport React, { useRef, useState, useEffect } from \"react\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\nimport * as cocossd from \"@tensorflow-models/coco-ssd\";\r\nimport Webcam from \"react-webcam\";\r\nimport \"./App.css\";\r\nimport { drawRect } from \"./utilities\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nconst FACING_MODE_USER = \"user\";\r\nconst FACING_MODE_ENVIRONMENT = \"environment\";\r\n\r\nconst videoConstraints = {\r\n  //width: 640,\r\n  //height: 480,\r\n  facingMode: FACING_MODE_USER\r\n};\r\n\r\n\r\nfunction App() {\r\n  const webcamRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n\r\n  const [facingMode, setFacingMode] = React.useState(FACING_MODE_USER);\r\n\r\n  const handleClick = React.useCallback(() => {\r\n    setFacingMode(\r\n      prevState =>\r\n        prevState === FACING_MODE_USER\r\n          ? FACING_MODE_ENVIRONMENT\r\n          : FACING_MODE_USER\r\n    );\r\n  }, []);\r\n\r\n  // Main function\r\n  const runCoco = async () => {\r\n    const net = await cocossd.load();\r\n    console.log(\"Handpose model loaded.\");\r\n    //  Loop and detect hands\r\n    setInterval(() => {\r\n      detect(net);\r\n    }, 10);\r\n  };\r\n\r\n  const detect = async (net) => {\r\n    // Check data is available\r\n    if (\r\n      typeof webcamRef.current !== \"undefined\" &&\r\n      webcamRef.current !== null &&\r\n      webcamRef.current.video.readyState === 4\r\n    ) {\r\n      // Get Video Properties\r\n      const video = webcamRef.current.video;\r\n      const videoWidth = webcamRef.current.video.videoWidth;\r\n      const videoHeight = webcamRef.current.video.videoHeight;\r\n\r\n      // Set video width\r\n      webcamRef.current.video.width = videoWidth;\r\n      webcamRef.current.video.height = videoHeight;\r\n\r\n      // Set canvas height and width\r\n      canvasRef.current.width = videoWidth;\r\n      canvasRef.current.height = videoHeight;\r\n\r\n      // Make Detections\r\n      const obj = await net.detect(video);\r\n\r\n      // Draw mesh\r\n      const ctx = canvasRef.current.getContext(\"2d\");\r\n      drawRect(obj, ctx);\r\n    }\r\n  };\r\n\r\n  useEffect(() => { runCoco() }, []);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n\r\n      <Button variant=\"light\" onClick={handleClick}>Switch camera</Button>\r\n      <header className=\"App-header\">\r\n\r\n    \r\n          <Webcam\r\n            ref={webcamRef}\r\n            muted={true}\r\n            style={{\r\n              position: \"absolute\",\r\n              marginLeft: \"auto\",\r\n              marginRight: \"auto\",\r\n              left: 0,\r\n              right: 0,\r\n              textAlign: \"center\",\r\n              zindex: 9,\r\n              //height: \"100%\",\r\n              // width: \"100%\"\r\n               width: 640,\r\n               height: 480,\r\n            }}\r\n            videoConstraints={{\r\n              ...videoConstraints,\r\n              facingMode\r\n            }}\r\n          />\r\n        \r\n        <canvas\r\n          ref={canvasRef}\r\n          style={{\r\n            position: \"absolute\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            left: 0,\r\n            right: 0,\r\n            textAlign: \"center\",\r\n            zindex: 8,\r\n\r\n             width: 640,\r\n             height: 480,\r\n          }}\r\n        />\r\n \r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}